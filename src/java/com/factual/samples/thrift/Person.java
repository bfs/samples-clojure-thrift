/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.factual.samples.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Person implements org.apache.thrift.TBase<Person, Person._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Person");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("first_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MIDDLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("middle_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)5);

  public String uuid;
  public String first_name;
  public String last_name;
  public String middle_name;
  /**
   * 
   * @see Gender
   */
  public Gender gender;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    FIRST_NAME((short)2, "first_name"),
    LAST_NAME((short)3, "last_name"),
    MIDDLE_NAME((short)4, "middle_name"),
    /**
     * 
     * @see Gender
     */
    GENDER((short)5, "gender");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // FIRST_NAME
          return FIRST_NAME;
        case 3: // LAST_NAME
          return LAST_NAME;
        case 4: // MIDDLE_NAME
          return MIDDLE_NAME;
        case 5: // GENDER
          return GENDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("first_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("last_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIDDLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("middle_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Gender.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Person.class, metaDataMap);
  }

  public Person() {
  }

  public Person(
    String first_name,
    String last_name)
  {
    this();
    this.first_name = first_name;
    this.last_name = last_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Person(Person other) {
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetFirst_name()) {
      this.first_name = other.first_name;
    }
    if (other.isSetLast_name()) {
      this.last_name = other.last_name;
    }
    if (other.isSetMiddle_name()) {
      this.middle_name = other.middle_name;
    }
    if (other.isSetGender()) {
      this.gender = other.gender;
    }
  }

  public Person deepCopy() {
    return new Person(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.first_name = null;
    this.last_name = null;
    this.middle_name = null;
    this.gender = null;
  }

  public String getUuid() {
    return this.uuid;
  }

  public Person setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public String getFirst_name() {
    return this.first_name;
  }

  public Person setFirst_name(String first_name) {
    this.first_name = first_name;
    return this;
  }

  public void unsetFirst_name() {
    this.first_name = null;
  }

  /** Returns true if field first_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst_name() {
    return this.first_name != null;
  }

  public void setFirst_nameIsSet(boolean value) {
    if (!value) {
      this.first_name = null;
    }
  }

  public String getLast_name() {
    return this.last_name;
  }

  public Person setLast_name(String last_name) {
    this.last_name = last_name;
    return this;
  }

  public void unsetLast_name() {
    this.last_name = null;
  }

  /** Returns true if field last_name is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_name() {
    return this.last_name != null;
  }

  public void setLast_nameIsSet(boolean value) {
    if (!value) {
      this.last_name = null;
    }
  }

  public String getMiddle_name() {
    return this.middle_name;
  }

  public Person setMiddle_name(String middle_name) {
    this.middle_name = middle_name;
    return this;
  }

  public void unsetMiddle_name() {
    this.middle_name = null;
  }

  /** Returns true if field middle_name is set (has been assigned a value) and false otherwise */
  public boolean isSetMiddle_name() {
    return this.middle_name != null;
  }

  public void setMiddle_nameIsSet(boolean value) {
    if (!value) {
      this.middle_name = null;
    }
  }

  /**
   * 
   * @see Gender
   */
  public Gender getGender() {
    return this.gender;
  }

  /**
   * 
   * @see Gender
   */
  public Person setGender(Gender gender) {
    this.gender = gender;
    return this;
  }

  public void unsetGender() {
    this.gender = null;
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return this.gender != null;
  }

  public void setGenderIsSet(boolean value) {
    if (!value) {
      this.gender = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case FIRST_NAME:
      if (value == null) {
        unsetFirst_name();
      } else {
        setFirst_name((String)value);
      }
      break;

    case LAST_NAME:
      if (value == null) {
        unsetLast_name();
      } else {
        setLast_name((String)value);
      }
      break;

    case MIDDLE_NAME:
      if (value == null) {
        unsetMiddle_name();
      } else {
        setMiddle_name((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Gender)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case FIRST_NAME:
      return getFirst_name();

    case LAST_NAME:
      return getLast_name();

    case MIDDLE_NAME:
      return getMiddle_name();

    case GENDER:
      return getGender();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case FIRST_NAME:
      return isSetFirst_name();
    case LAST_NAME:
      return isSetLast_name();
    case MIDDLE_NAME:
      return isSetMiddle_name();
    case GENDER:
      return isSetGender();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Person)
      return this.equals((Person)that);
    return false;
  }

  public boolean equals(Person that) {
    if (that == null)
      return false;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_first_name = true && this.isSetFirst_name();
    boolean that_present_first_name = true && that.isSetFirst_name();
    if (this_present_first_name || that_present_first_name) {
      if (!(this_present_first_name && that_present_first_name))
        return false;
      if (!this.first_name.equals(that.first_name))
        return false;
    }

    boolean this_present_last_name = true && this.isSetLast_name();
    boolean that_present_last_name = true && that.isSetLast_name();
    if (this_present_last_name || that_present_last_name) {
      if (!(this_present_last_name && that_present_last_name))
        return false;
      if (!this.last_name.equals(that.last_name))
        return false;
    }

    boolean this_present_middle_name = true && this.isSetMiddle_name();
    boolean that_present_middle_name = true && that.isSetMiddle_name();
    if (this_present_middle_name || that_present_middle_name) {
      if (!(this_present_middle_name && that_present_middle_name))
        return false;
      if (!this.middle_name.equals(that.middle_name))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (!this.gender.equals(that.gender))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Person other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Person typedOther = (Person)other;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirst_name()).compareTo(typedOther.isSetFirst_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first_name, typedOther.first_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_name()).compareTo(typedOther.isSetLast_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_name, typedOther.last_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMiddle_name()).compareTo(typedOther.isSetMiddle_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiddle_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.middle_name, typedOther.middle_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(typedOther.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, typedOther.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // UUID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.uuid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FIRST_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.first_name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LAST_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.last_name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // MIDDLE_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.middle_name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // GENDER
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.gender = Gender.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.uuid != null) {
      if (isSetUuid()) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(this.uuid);
        oprot.writeFieldEnd();
      }
    }
    if (this.first_name != null) {
      oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
      oprot.writeString(this.first_name);
      oprot.writeFieldEnd();
    }
    if (this.last_name != null) {
      oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
      oprot.writeString(this.last_name);
      oprot.writeFieldEnd();
    }
    if (this.middle_name != null) {
      if (isSetMiddle_name()) {
        oprot.writeFieldBegin(MIDDLE_NAME_FIELD_DESC);
        oprot.writeString(this.middle_name);
        oprot.writeFieldEnd();
      }
    }
    if (this.gender != null) {
      if (isSetGender()) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeI32(this.gender.getValue());
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Person(");
    boolean first = true;

    if (isSetUuid()) {
      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("first_name:");
    if (this.first_name == null) {
      sb.append("null");
    } else {
      sb.append(this.first_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("last_name:");
    if (this.last_name == null) {
      sb.append("null");
    } else {
      sb.append(this.last_name);
    }
    first = false;
    if (isSetMiddle_name()) {
      if (!first) sb.append(", ");
      sb.append("middle_name:");
      if (this.middle_name == null) {
        sb.append("null");
      } else {
        sb.append(this.middle_name);
      }
      first = false;
    }
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      if (this.gender == null) {
        sb.append("null");
      } else {
        sb.append(this.gender);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (first_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'first_name' was not present! Struct: " + toString());
    }
    if (last_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'last_name' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

